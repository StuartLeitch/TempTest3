# do not use "latest" here, if you want this to work in the future
image: docker:$DOCKER_VERSION

stages:
  - setup
  #- test
  - build
  - package
  - deploy

variables:
  AFFECTED_ARGS: '--base=remotes/origin/develop'
  DOCKER_TLS_CERTDIR: '/certs'
  DOCKER_DRIVER: overlay2
  DOCKER_VERSION: 18.09.0
  REGION: 'eu-west-1'
  AWS_REGISTRY: '918602980697.dkr.ecr.eu-west-1.amazonaws.com'
  BT_ENVIRONMENT: 'Sandbox'
  BT_MERCHANT_ID: 'test-merchant-id'
  BT_PUBLIC_KEY: 'test-public-key'
  BT_PRIVATE_KEY: 'test-private-key'

services:
  - docker:$DOCKER_VERSION-dind

before_script:
  # docker login asks for the password to be passed through stdin for security
  # we use $CI_JOB_TOKEN here which is a special token provided by GitLab
  # - echo -n $CI_JOB_TOKEN | docker login -u gitlab-ci-token --password-stdin $CI_REGISTRY

Install Dependencies:
  stage: setup
  image: node:latest
  cache:
    key: $CI_COMMIT_REF_SLUG-$CI_PROJECT_DIR
    paths:
      - node_modules/
  script:
    # - npm version
    # - env
    - npm ci
  only:
    changes:
      - package-lock.json

# Identify Affected:
#   stage: setup
#   image: node:latest
#   script:
#     - export AFFECTED_APPS=$(./tools/scripts/affected_apps.sh)
#     - export AFFECTED_LIBS=$(./tools/scripts/affected_libs.sh)
#     - export AFFECTED_ARGS=$(./tools/scripts/affected.sh)
#   artifacts:
#     paths:
#       - dist

# test:
#   interruptible: true
#   allow_failure: true
#   stage: test
#   coverage: '/Statements\s*:.*?\s+(\d+.\d+)%/'
#   artifacts:
#     paths:
#       - coverage/
#     reports:
#       junit:
#         - coverage/apps/invoicing-cli/junit.xml
#         - coverage/apps/invoicing-graphql/junit.xml
#         - coverage/apps/invoicing-web/junit.xml
#         - coverage/libs/shared/junit.xml
#         - coverage/libs/react-components/junit.xml
#   script:
#     - npm run nx -- test shared --code-coverage
#     - npm run nx -- test react-components --code-coverage
#     - npm run nx -- test invoicing-graphql --code-coverage
#     - npm run nx -- test invoicing-web --code-coverage
#     - npm run nx -- test invoicing-cli --code-coverage
#     - npm run ci:coverage
#   only:
#     - develop
#     - master
#     - /^FM-\d+/
#   dependencies:
#     - install

# lint:
#   interruptible: true
#   stage: test
#   script:
#     - npm run nx -- lint shared
#     - npm run nx -- lint react-components
#     - npm run nx -- lint invoicing-graphql
#   only:
#     - monorepo-nx

# pages:
#   interruptible: true
#   stage: deploy
#   script:
#     - mkdir -p public
#     - cp coverage/*.* public/
#     - mv public/index.html public/coverage.html
#   artifacts:
#     paths:
#       - public
#   dependencies:
#     - test
#   only:
#     - develop

Build:
  interruptible: true
  stage: build
  image: node:latest
  cache:
    key: $CI_COMMIT_REF_SLUG-$CI_PROJECT_DIR
    paths:
      - node_modules/
    policy: pull
  script:
    - export AFFECTED_ARGS=$(./tools/scripts/affected.sh)
    - npm run affected:build -- ${AFFECTED_ARGS} --parallel --configuration production
    - mkdir .ci_status
    - echo $(npm run affected:apps -- ${AFFECTED_ARGS} --plain 2>&1 | tail -1) > .ci_status/affected_apps
    - echo $(npm run affected:libs -- ${AFFECTED_ARGS} --plain 2>&1 | tail -1) > .ci_status/affected_libs
  dependencies:
    - Install Dependencies
  artifacts:
    paths:
      - .ci_status
      - dist
  only:
    - develop

Package Images:
  interruptible: true
  stage: package
  image: docker:$DOCKER_VERSION
  before_script:
    - apk add --no-cache curl jq python py-pip
    - pip install awscli
    - $(aws ecr get-login --no-include-email --region "${REGION}")
  script:
    - export AFFECTED_APPS=$(cat .ci_status/affected_apps)
    - export AFFECTED_LIBS=$(cat .ci_status/affected_libs)
    # - env
    - ./tools/scripts/dockerize.sh
  dependencies:
    - Build
  artifacts:
    paths:
      - .ci_status
      - dist
  only:
    - develop

Deploy to Dev:
  stage: deploy
  image: docker:$DOCKER_VERSION
  dependencies:
    - Package Images
  when: manual
  only:
    - develop
  before_script:
    - apk add --no-cache curl jq python py-pip
    - pip install awscli
    - $(aws ecr get-login --no-include-email --region "${REGION}")
  script:
    - export AFFECTED_APPS=$(cat .ci_status/affected_apps)
    - export AFFECTED_LIBS=$(cat .ci_status/affected_libs)
    - ./tools/scripts/deploy.sh
