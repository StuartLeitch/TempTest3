variables:
  DOCKER_TLS_CERTDIR: '/certs'
  DOCKER_DRIVER: overlay2
  # DOCKER_HOST: tcp://docker:2375/
  DOCKER_VERSION: 18.09.0
  REGION: 'eu-west-1'
  AWS_REGISTRY: '918602980697.dkr.ecr.eu-west-1.amazonaws.com'
  BT_ENVIRONMENT: 'Sandbox'
  BT_MERCHANT_ID: 'test-merchant-id'
  BT_PUBLIC_KEY: 'test-public-key'
  BT_PRIVATE_KEY: 'test-private-key'

default:
  image: docker:$DOCKER_VERSION
  services:
    - docker:$DOCKER_VERSION-dind
  before_script:
    # docker login asks for the password to be passed through stdin for security
    # we use $CI_JOB_TOKEN here which is a special token provided by GitLab
    - echo -n $CI_JOB_TOKEN | docker login -u gitlab-ci-token --password-stdin $CI_REGISTRY

stages:
  - cache
  - push
  #- test
  #- build
  #- package
  #- deploy

Cache:
  interruptible: true
  stage: cache
  script:
    # fetches the latest image (not failing if image is not found)
    - docker pull $CI_REGISTRY_IMAGE:latest || true
    # builds the project, passing proxy variables, and vcs vars for LABEL
    # notice the cache-from, which is going to use the image we just pulled locally
    # the built image is tagged locally with the commit SHA, and then pushed to
    # the GitLab registry
    - >
      docker build
      --pull
      --build-arg VCS_REF=$CI_COMMIT_SHA
      --build-arg VCS_URL=$CI_PROJECT_URL
      --cache-from $CI_REGISTRY_IMAGE:latest
      --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
      .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA

# Here, the goal is to tag the "develop" branch as "latest"
Push latest:
  variables:
    # We are just playing with Docker here.
    # We do not need GitLab to clone the source code.
    GIT_STRATEGY: none
  stage: push
  only:
    # Only "develop" should be tagged "latest"
    - develop
  script:
    # Because we have no guarantee that this job will be picked up by the same runner
    # that built the image in the previous step, we pull it again locally
    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    # Then we tag it "latest"
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE:latest
    # Annnd we push it.
    - docker push $CI_REGISTRY_IMAGE:latest

# Finally, the goal here is to Docker tag any Git tag
# GitLab will start a new pipeline every time a Git tag is created, which is pretty awesome
Push tag:
  variables:
    # Again, we do not need the source code here. Just playing with Docker.
    GIT_STRATEGY: none
  stage: push
  only:
    # We want this job to be run on tags only.
    - tags
  script:
    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME
# install:
#   interruptible: true
#   stage: setup
#   variables:
#     # We are just playing with Docker here.
#     # We do not need GitLab to clone the source code.
#     GIT_STRATEGY: none
#   artifacts:
#     paths:
#       - node_modules/
#   script:
#     - npm ci

# Info:
#   interruptible: true
#   stage: setup
#   script:
#     - npm version
#     - env

# test:
#   interruptible: true
#   allow_failure: true
#   stage: test
#   coverage: '/Statements\s*:.*?\s+(\d+.\d+)%/'
#   artifacts:
#     paths:
#       - coverage/
#     reports:
#       junit:
#         - coverage/apps/invoicing-cli/junit.xml
#         - coverage/apps/invoicing-graphql/junit.xml
#         - coverage/apps/invoicing-web/junit.xml
#         - coverage/libs/shared/junit.xml
#         - coverage/libs/react-components/junit.xml
#   script:
#     - npm run nx -- test shared --code-coverage
#     - npm run nx -- test react-components --code-coverage
#     - npm run nx -- test invoicing-graphql --code-coverage
#     - npm run nx -- test invoicing-web --code-coverage
#     - npm run nx -- test invoicing-cli --code-coverage
#     - npm run ci:coverage
#   only:
#     - develop
#     - master
#     - /^FM-\d+/
#   dependencies:
#     - install

# # lint:
# #   interruptible: true
# #   stage: test
# #   script:
# #     - npm run nx -- lint shared
# #     - npm run nx -- lint react-components
# #     - npm run nx -- lint invoicing-graphql
# #   only:
# #     - monorepo-nx

# pages:
#   interruptible: true
#   stage: deploy
#   script:
#     - mkdir -p public
#     - cp coverage/*.* public/
#     - mv public/index.html public/coverage.html
#   artifacts:
#     paths:
#       - public
#   dependencies:
#     - test
#   only:
#     - develop

# build_code:
#   interruptible: true
#   stage: build
#   script:
#     - npm run nx -- build invoicing-web --prod
#     - npm run nx -- build invoicing-graphql --prod
#   dependencies:
#     - install
#   artifacts:
#     paths:
#       - apps/invoicing-web/dist
#       - apps/invoicing-graphql/dist
#   only:
#     - develop

# package_images:
#   interruptible: true
#   stage: package
#   image: docker:18
#   before_script:
#     - apk add --no-cache curl jq python py-pip
#     - pip install awscli
#     - $(aws ecr get-login --no-include-email --region "${REGION}")
#   script:
#     - docker build -t $AWS_REGISTRY/invoicing-web:$CI_COMMIT_SHA apps/invoicing-web
#     - docker push $AWS_REGISTRY/invoicing-web:$CI_COMMIT_SHA
#     - docker build -t $AWS_REGISTRY/invoicing-graphql:$CI_COMMIT_SHA apps/invoicing-graphql
#     - docker push $AWS_REGISTRY/invoicing-graphql:$CI_COMMIT_SHA
#     - docker tag $AWS_REGISTRY/invoicing-graphql:$CI_COMMIT_SHA $AWS_REGISTRY/invoicing-graphql:dev
#     - docker tag $AWS_REGISTRY/invoicing-web:$CI_COMMIT_SHA $AWS_REGISTRY/invoicing-web:dev
#     - docker push $AWS_REGISTRY/invoicing-graphql:dev
#     - docker push $AWS_REGISTRY/invoicing-web:dev
#   dependencies:
#     - build_code
#   only:
#     - develop

# deploy_dev:
#   stage: deploy
#   image: docker:18
#   dependencies:
#     - package_images
#   when: manual
#   only:
#     - develop
#   before_script:
#     - apk add --no-cache curl jq python py-pip
#     - pip install awscli
#     - $(aws ecr get-login --no-include-email --region "${REGION}")
#   script:
#     - aws elasticbeanstalk update-environment --environment-name invoicing-web-dev --version-label invoicing-web-dev
#     - aws elasticbeanstalk update-environment --environment-name invoicing-graphql-dev --version-label invoicing-graphql-dev
