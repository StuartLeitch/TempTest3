scalar Date
scalar ReferenceNumber
scalar ID
scalar Name

directive @model(id: ID) on OBJECT
directive @filter(key: Name) on FIELD_DEFINITION

enum InvoiceStatus {
  DRAFT
  PENDING
  ACTIVE
  FINAL
}

type Article @model(id: "articles") {
  id: String
  journalId: ID @filter
  journalTitle: String
  customId: ID @filter
  created: Date
  title: String
  articleType: String
  authorEmail: String
  authorCountry: String
  authorSurname: String
  authorFirstName: String
}

type Transaction @model(id: "transactions") {
  id: String
  status: String @filter(key: "transactionStatus")
}

enum TransactionStatus {
  DRAFT
  ACTIVE
  FINAL
}

type InvoiceItem @model(id: "invoice_items") {
  id: String
  invoiceId: ID
  manuscriptId: ID
  type: String
  price: Float
  rate: Float
  vat: Float
  vatnote: String
  article: Article
  dateCreated: Date
  coupons: [Coupon]
  waivers: [Waiver]
}

type Invoice @model(id: "invoices") {
  invoiceId: ID
  dateCreated: String
  dateChanged: String
  dateIssued: String
  dateAccepted: String
  vat: Float
  charge: Float
  status: InvoiceStatus @filter(key: "invoiceStatus")
  payer: Payer
  referenceNumber: ReferenceNumber @filter
  invoiceItem: InvoiceItem
  title: String
  price: Float
  customId: ID
  type: String
  payment: Payment
  payments: [Payment]
}

type InvoiceVat {
  vatPercentage: Float
  vatNote: String
  rate: Float
}

type InvoiceId {
  invoiceId: [ID]
}

input AddressInput {
  city: String
  country: String
  state: String
  postalCode: String
  addressLine1: String
}

input PayerInput {
  id: String
  invoiceId: String
  type: PayerType
  name: String
  email: String
  organization: String
  vatId: String
  address: AddressInput
}

type Journal {
  journalId: ID
  journalTitle: String
  # ... (TODO: add missing fields here)
}

enum PayerType {
  INSTITUTION
  INDIVIDUAL
}

type Payer {
  id: String
  type: PayerType
  name: String
  email: String
  organization: String
  address: Address
  vatId: String
}

type Address {
  city: String
  country: String
  state: String
  postalCode: String
  addressLine1: String
}

input CreditCardInput {
  amount: Float!
  cardNumber: String!
  expiration: String!
  cvv: String!
  postalCode: String
}

type Payment {
  id: String!
  invoiceId: String
  payerId: String
  paymentMethodId: String
  foreignPaymentId: String
  paymentProof: String
  amount: Float
  datePaid: Date
  paymentMethod: PaymentMethod
}

type PaymentMethod {
  id: String!
  name: String!
  isActive: Boolean
}

type Coupon {
  reduction: Float
  code: String
}

type Waiver {
  reduction: Float
  type_id: String
}

type ClientToken {
  token: String!
}

type PaginatedInvoices {
  totalCount: Int
  invoices: [Invoice]
}

input ArticleFilters {
  journalId: [ID]
  customId: [ID]
}
input InvoiceItemFilters {
  article: ArticleFilters
}
input InvoiceFilters {
  invoiceStatus: [InvoiceStatus]
  transactionStatus: [TransactionStatus]
  referenceNumber: [ReferenceNumber]
  invoiceItem: InvoiceItemFilters
}

input Pagination {
  offset: Int
  limit: Int
}

input MigratePayerAddress {
  addressLine2: String
  addressLine1: String!
  countryCode: String!
  state: String
  city: String!
}

input MigratePayer {
  vatRegistrationNumber: String
  address: MigratePayerAddress!
  organization: String
  email: String!
  name: String!
  type: String!
}

input MigrateAPC {
  invoiceReference: String
  paymentAmount: Float
  manuscriptId: String!
  discount: Float
  price: Float!
  vat: Float
}

type Query {
  getPaymentMethods: [PaymentMethod]
  getClientToken: ClientToken
  invoice(invoiceId: ID): Invoice
  invoiceVat(
    invoiceId: ID
    country: String
    state: String
    postalCode: String
    payerType: String
  ): InvoiceVat
  invoices(filters: InvoiceFilters, pagination: Pagination): PaginatedInvoices
  invoiceIdByManuscriptCustomId(customId: ID): InvoiceId
  journals: [Journal]
  echo(value: String): String
}

type Mutation {
  confirmInvoice(payer: PayerInput!): Payer!
  applyCoupon(invoiceId: ID, couponCode: String): Coupon
  createInvoice(totalAmount: Float): Invoice
  deleteInvoice(id: ID!): Boolean
  setTransactionToActive(customId: ID): Transaction
  creditCardPayment(
    invoiceId: ID!
    payerId: String!
    paymentMethodId: String!
    paymentMethodNonce: String!
    amount: Float!
  ): Payment!
  bankTransferPayment(
    invoiceId: String!
    payerId: String!
    paymentMethodId: String!
    paymentReference: String!
    amount: Float!
    datePaid: String!
    markInvoiceAsPaid: Boolean
  ): Payment!
  recordPayPalPayment(
    paymentMethodId: String!
    invoiceId: ID!
    payerId: String!
    orderId: String!
  ): Payment!
  migratePayment(
    invoiceId: ID!
    payerId: String!
    amount: Float
    datePaid: String
  ): Payment!
  migrateInvoice(
    invoiceId: ID!
    vatValue: Float
    invoiceReference: Float
    discount: Float
    APC: Float
    dateIssued: String
    dateAccepted: String
  ): Invoice
  migrateEntireInvoice(
    acceptanceDate: String
    submissionDate: String!
    paymentDate: String
    issueDate: String
    erpReference: String
    payer: MigratePayer
    invoiceId: String!
    apc: MigrateAPC!
    token: String!
  ): String
}
