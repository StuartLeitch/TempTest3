image:
  name: $BUILD_IMAGE

stages:
  - setup
  - test
  - build
  - package
  # - deploy

variables:
  AFFECTED_ARGS: '--base=remotes/origin/develop'
  DOCKER_HOST: tcp://docker:2375
  DOCKER_TLS_CERTDIR: ''
  DOCKER_DRIVER: overlay2
  NODE_VERSION: 14.4.0
  BUILD_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
  LATEST_BUILD_IMAGE: $CI_REGISTRY_IMAGE:latest
  AWS_REGION: 'eu-west-1'
  AWS_REGISTRY: '918602980697.dkr.ecr.eu-west-1.amazonaws.com'
  BT_ENVIRONMENT: 'sandbox'
  BT_MERCHANT_ID: 'test-merchant-id'
  BT_PUBLIC_KEY: 'test-public-key'
  BT_PRIVATE_KEY: 'test-private-key'
  VAT_VALIDATION_SERVICE_ENDPOINT: 'http://ec.europa.eu/taxation_customs/vies/checkVatService.wsdl'
  AFFECTED_APPS: 'reporting-backend'

Install Dependencies:
  interruptible: true
  allow_failure: false
  stage: setup
  services:
    - name: docker:dind
      entrypoint: ['env', '-u', 'DOCKER_HOST']
      command: ['dockerd-entrypoint.sh']
  image: docker
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - ./tools/scripts/dockerize-builder.sh

Test:
  interruptible: true
  allow_failure: true
  stage: test
  # before_script: added to dockerfile.build
  #   - apt-get update
  #   - apt-get -y install imagemagick graphicsmagick
  script:
    - cd $HOME
    - yarn run nx run-many --target=test --projects=$AFFECTED_APPS --configuration=production --code-coverage
    - yarn run ci:coverage
  coverage: '/Statements\s*:.*?\s+(\d+.\d+)%/'
  artifacts:
    paths:
      - coverage/
    reports:
      junit:
        - coverage/apps/**/junit.xml
        - coverage/libs/**/junit.xml
  # only:
  #   - develop
  #   - master
  #   - /^FM-\d+/
  # dependencies:
  #   - install

Build:
  interruptible: true
  stage: build
  script:
    - cd $HOME
    - yarn run nx run-many --target=build --projects=$AFFECTED_APPS --configuration=production --parallel
    - mkdir .ci_status
    - echo "${AFFECTED_APPS//,/ }" > .ci_status/affected_apps
  artifacts:
    paths:
      - .ci_status
      - dist
  # only:
  #   - develop

Package Images:
  interruptible: true
  stage: package
  image: docker
  before_script:
    - apk add --no-cache curl jq python py-pip
    - pip install awscli
  services:
    - name: docker:dind
      entrypoint: ['env', '-u', 'DOCKER_HOST']
      command: ['dockerd-entrypoint.sh']
  script:
    - cd $HOME
    - export AFFECTED_APPS=$(cat .ci_status/affected_apps)
    - ./tools/scripts/dockerize-apps.sh
  dependencies:
    - Build
  artifacts:
    paths:
      - .ci_status
      - dist
#   only:
#     - develop

# Deploy to Dev:
#   stage: deploy
#   image: docker:$DOCKER_VERSION
#   dependencies:
#     - Package Images
#   when: manual
#   only:
#     - develop
#   before_script:
#     - apk add --no-cache curl jq python py-pip
#     - pip install awscli
#     - $(aws ecr get-login --no-include-email --region "${REGION}")
#   script:
#     - export AFFECTED_APPS=$(cat .ci_status/affected_apps)
#     - export AFFECTED_LIBS=$(cat .ci_status/affected_libs)
#     - ./tools/scripts/deploy.sh

# Pages:
#   interruptible: true
#   stage: deploy
#   script:
#     - mkdir -p public
#     - cp coverage/*.* public/
#     - mv public/index.html public/coverage.html
#   artifacts:
#     paths:
#       - public
#   dependencies:
#     - Test
#   only:
#     - develop
