scalar Date

enum InvoiceStatus {
  DRAFT
  ACTIVE
  FINAL
}

type Invoice {
  id: String
  dateCreated: String
  dateChanged: String
  vat: Float
  charge: Float
  status: InvoiceStatus
  payer: Payer
}

input AddressInput {
  city: String
  country: String
  addressLine1: String
}

input PayerInput {
  id: String
  type: PayerType
  name: String
  email: String
  organization: String
  vatId: String
  address: AddressInput
}

enum PayerType {
  INSTITUTION
  INDIVIDUAL
}

type Payer {
  id: String
  type: PayerType
  name: String
  email: String
  organization: String
  address: Address
}

type Address {
  city: String
  country: String
  addressLine1: String
}

input CreditCardInput {
  cardNumber: String!
  expiration: String!
  cvv: String!
}

type Payment {
  id: String!
  invoiceId: String
  paymentMethodId: String
  amount: Float
  datePaid: Date
}

type PaymentMethod {
  id: String!
  name: String!
  active: Boolean
}

type Query {
  invoice(id: String): Invoice
  getPaymentMethods: [PaymentMethod]
}

type Mutation {
  confirmInvoice(payer: PayerInput!): Payer!
  createInvoice(totalAmount: Float): Invoice
  deleteInvoice(id: String!): Boolean
  recordCardPayment(input: CreditCardInput!): Payment!
}
