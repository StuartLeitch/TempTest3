/* eslint-disable @nrwl/nx/enforce-module-boundaries */

import { expect } from 'chai';
import { Given, When, Then, Before } from '@cucumber/cucumber';

import {
  // UniqueEntityID,
  // JournalId,
  CatalogMap,
  MockLogger,
  MockCatalogRepo,
} from '@hindawi/shared';

// import { JournalUpdatedHandler } from '../../../src/queue_service/handlers/JournalUpdated';
// import * as JournalUpdatedData from './JournalUpdated.json';

// const { handler } = JournalUpdatedHandler;

let mockLogger: MockLogger;
// let mockEditorRepo: MockEditorRepo;
let mockCatalogRepo: MockCatalogRepo;

let context = {};
// let eventData = null;
// let journalId = null;
// let journalEditors = [];

Before(() => {
  mockLogger = new MockLogger();
  // mockEditorRepo = new MockEditorRepo();
  mockCatalogRepo = new MockCatalogRepo();

  context = {
    repos: {
      // editor: mockEditorRepo,
      catalog: mockCatalogRepo,
    },
    services: {
      logger: mockLogger,
    },
  };
});

Given(/^There is the Journal "([\w-]+)"$/, async function (foo) {
  // const testJournal = CatalogMap.toDomain({
  //   ...JournalUpdatedData,
  //   journalId: JournalUpdatedData.id,
  //   type: 'FOO',
  //   apc: 666,
  // });
  // // console.info(testJournal);
  // await mockCatalogRepo.save(testJournal);
});

When('JournalUpdated event is being published', async () => {
  // try {
  //   // await handler.call(context, eventData);
  //   await handler.call(context, JournalUpdatedData);
  // } catch (err) {
  //   console.error(err);
  // }
});

Then(/^The journal "([\w-]+)" should be updated$/, async () => {
  // const rawJournalId = JournalUpdatedData.id;
  // const journalId = JournalId.create(new UniqueEntityID(rawJournalId));

  // const journal = await mockCatalogRepo.getCatalogItemById(
  //   journalId.getValue().id
  // );

  // expect(journal.amount).to.equal(JournalUpdatedData.apc);
  expect(true).equals(true);
});
